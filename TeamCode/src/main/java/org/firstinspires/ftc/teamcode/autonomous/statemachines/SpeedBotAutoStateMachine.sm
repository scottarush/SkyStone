%class AutonomousController
%package org.firstinspires.ftc.teamcode.autonomous
// http://smc.sourceforge.net/
%start SpeedBotAutoStateMachine::Idle

%map SpeedBotAutoStateMachine
%%
    Idle
    {
        evStartDriveToStones jump(GetStones::Start) { }
        evStartDragFoundation jump(DragFoundation::Start) { }
    }
%%

    // StateMachine for GetStones sequence
%map GetStones
%%
    /*
    * drives forward close enough to be able to locate a Skystone with the camera
    */
    Start
        Entry {
            openHand();
            // start drive forward.
            // linearDrive(22d)
            // Hack it for States just drive up to the quarry.  checkStoneRecognition
            // will automatically trigger evNoStoneFound
            linearDrive(32d);
        }
    {
        evDriveComplete nil { checkStoneRecognition(); }
        evDriveTimeout nil {  checkStoneRecognition(); }
        // Triggered by checkStoneRecognition if we found a Skystone
        evSkystoneFound StrafeToStone { strafeToSkystone(10d,2000); }
        // Triggered by checkStoneRecognition if we found a Skystone
        evStoneFound StrafeToStone { strafeToStone(10d,2000); }
        // Triggered by checkStoneRecognition if no stone was found
        evNoStoneFound DriveForwardToStone {   }
    }

    StrafeToStone
        Entry{
         }
    {
        evDriveComplete DriveForwardToStone {}
        evDriveTimeout DriveForwardToStone {}
    }

    DriveForwardToStone
        Entry{
            linearDrive(10d);
        }
    {
        evDriveComplete GrabStone {}
        // Give it a try anyway
        evDriveTimeout GrabStone {}
    }
    /*
    * Stop after drive forward and check to see if we are at foundation.
    */
    GrabStone
        Entry{
            // close the hook and wait for it to stop so that we grab the block
            closeHand();
            startHandTimer();
         }
    {
        evHandTimeout BackupToBeginDrag { }
    }
    /*
    * Backup to begin the drag
    */
    BackupToBeginDrag
        Entry{
            linearDrive(-17d);
         }
    {
        evDriveComplete [ctxt.isBlueAlliance() == true] RotateTowardBridge {
            // Rotate CCW toward the bridge
            rotate(+90);
        }
        evDriveComplete [ctxt.isBlueAlliance() == false] RotateTowardBridge {
            // Rotate CW toward the bridege
            rotate(-90);
        }
        // Try it anyway
        evDriveTimeout [ctxt.isBlueAlliance() == true] RotateTowardBridge {
            // Rotate CCW toward the bridge
            rotate(+90);
        }
        // Try it anyway
        evDriveTimeout [ctxt.isBlueAlliance() == false] RotateTowardBridge {
            // Rotate CW toward the bridege
            rotate(-90);
        }
    }

    /*
    * Rotates toward the bridge and then starts the linear drive to the bridge
    */
    RotateTowardBridge
    {
        evRotationComplete nil  { linearDriveBugUnblocker(); }
        // Try it anyway even if rotation is off.
        evRotationTimeout nil  { linearDriveBugUnblocker(); }
        evDriveComplete DragStone { }
        evDriveTimeout DragStone { }
    }
    /*
    * Drags the stone back under the bridge
    */
    DragStone
        Entry {
            linearDrive(56d);
        }
    {
        evDriveComplete ReleaseStone {}
        evDriveTimeout ReleaseStone {}
    }
    ReleaseStone
        Entry {
            openHand();
            linearDrive(-6d);
        }
    {
        evDriveComplete BackupToBridgeLine {  }
        evDriveTimeout BackupToBridgeLine { }
    }

    /*
    *
    */
    BackupToBridgeLine
        Entry {
            //  backup to the line
            closeHand();
            linearDrive(-12d);
        }
    {
       evDriveComplete [ctxt.isBlueAlliance() == true] RotateToWall {
            rotate(-90);
        }
        evDriveComplete [ctxt.isBlueAlliance() == false] RotateToWall {
            rotate(+90);
        }
        evDriveTimeout [ctxt.isBlueAlliance() == true] RotateToWall {
            rotate(-90);
        }
        evDriveTimeout [ctxt.isBlueAlliance() == false] RotateToWall {
            rotate(+90);
        }
    }
    RotateToWall
    {
        evRotationComplete nil { linearDriveBugUnblocker(); }
        evRotationTimeout nil { linearDriveBugUnblocker(); }
        evDriveComplete BackupToWall {  }
        evDriveTimeout BackupToWall {  }
    }

    BackupToWall
        Entry{
        linearDrive(-15d);
    }
    {
        evDriveComplete Complete { }
        evDriveTimeout Complete { }
    }
    /*
    * Final state
    */
    Complete
        Entry{
            stop();
        }
    {

    }
%%
// StateMachine for DragFoundation sequence
%map DragFoundation
%%
    /*
    * drive forward 26 inches.  This should push the foundation by 2 inches
    */
    Start
        Entry {
            openHook();
            closeHand();
            // Raise crane by 4 inches to get clearance for dragging
            moveCrane(4d);
            startHookTimer();
        }
    {
        evHookTimeout DriveToFoundation { }
    }

    DriveToFoundation
        Entry{
            // start drive forward
            linearDrive(26d);
    }
    {
       evDriveComplete GrabFoundation {  }
        // Give it a college try on timeout, but we may not have hooked it
        evDriveTimeout GrabFoundation { }
    }

    GrabFoundation
        Entry {
            closeHook();
            startHookTimer();
        }
    {
        evHookTimeout DragFoundation {  }
    }

    DragFoundation
        Entry {
            linearDrive(-20d);
        }
    {
        evDriveComplete [ctxt.isBlueAlliance() == true] RotateFoundation {
            // Rotate CCW toward the blue line
            rotate(+45);
         }
        evDriveComplete [ctxt.isBlueAlliance() == false] RotateFoundation {
            // Rotate CW toward the red line
            rotate(-45);
        }
        evDriveTimeout [ctxt.isBlueAlliance() == true] RotateFoundation {
            // Rotate CCW toward the blue line
            rotate(+45);
        }
        evDriveTimeout [ctxt.isBlueAlliance() == false] RotateFoundation {
            // Rotate CW toward the red line
            rotate(-45);
        }
    }
    RotateFoundation
    {
        // May not have rotated far enough release and try to correct rotation for backup
        evRotationTimeout ReleaseAndCorrectRotation { }
        // Rotation was good so go to release
        evRotationComplete ReleaseFoundation { }
    }

    ReleaseFoundation
        Entry {
            openHook();
            startHookTimer();
        }
    {
         evHookTimeout [ctxt.isBlueAlliance() == true] RotateToBackup {
            // Rotate CCW to line up backwards to the skybridge
            rotate(+45);
        }
        evHookTimeout [ctxt.isBlueAlliance() == false] RotateToBackup {
            // Rotate CW to line up backwards to the skybridge
            rotate(-45);
        }
    }
    /**
    * Corrects rotation error if we weren't able to rotate the foundation by the full amount
    */
    ReleaseAndCorrectRotation
    Entry{
        openHook();
        startHookTimer();
    }
    {
        evHookTimeout [ctxt.isBlueAlliance() == true] RotateToBackup {
            // Rotate CCW to line up backwards to the skybridge adding the error from not being
            // able to rotate the foundation as far
            rotate(+45+(45-ctxt.getLastRotationAngle()));
        }
        evHookTimeout [ctxt.isBlueAlliance() == false] RotateToBackup {
            // Rotate CW to line up backwards to the skybridge
            rotate(-45+(-45-ctxt.getLastRotationAngle()));
        }
    }

    RotateToBackup
    {
        evRotationComplete nil { linearDriveBugUnblocker(); }
        // May not have completed but give it a try anyway
        evRotationTimeout nil {  linearDriveBugUnblocker(); }
        evDriveComplete LowerCrane { }
        evDriveTimeout LowerCrane { }
     }

    LowerCrane
        Entry{
            moveCrane(-4d);
            closeHand();
            startCraneTimer();
        }
    {
        evCraneTimeout BackupToBridge { }
    }

    BackupToBridge
    Entry {
        linearDrive(-32d);
     }
    {
        evDriveComplete Complete {  }
        evDriveTimeout Complete {  }
    }

    Complete
    Entry {
    }
    {

    }
%%
