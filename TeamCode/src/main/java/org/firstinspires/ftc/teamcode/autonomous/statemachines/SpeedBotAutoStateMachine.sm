%class AutonomousController
%package org.firstinspires.ftc.teamcode.autonomous
// http://smc.sourceforge.net/
%start SpeedBotAutoStateMachine::Idle

%map SpeedBotAutoStateMachine
%%
    Idle
    {
        evStartDriveToStones jump(GetStones::Start) { }
        evStartDragFoundation jump(DragFoundation::Start) { }
        evStartTechnoLogicsBridgePark jump(TechnoLogicsBridgePark::Start) { }
        evStartNerdBotsBridgePark jump (NerdBotsBridgePark::Start) { }
    }
%%

    // StateMachine for GetStones sequence
%map GetStones
%%
    /*
    * drives forward close enough to be able to locate a Skystone with the camera
    */
    Start
        Entry {
            openHand();
            // start drive forward.
            // linearDrive(22d)
            // Hack it for States just drive up to the quarry.  checkStoneRecognition
            // will automatically trigger evNoStoneFound
            linearDriveSlow(28d);
        }
    {
        evDriveComplete nil { checkStoneRecognition(); }
        evDriveTimeout nil {  checkStoneRecognition(); }
        // Triggered by checkStoneRecognition if we found a Skystone
        evSkystoneFound StrafeToStone { strafeToSkystone(10d,2000); }
        // Triggered by checkStoneRecognition if we found a Skystone
        evStoneFound StrafeToStone { strafeToStone(10d,2000); }
        // Triggered by checkStoneRecognition if no stone was found
        evNoStoneFound DriveForwardToStone {   }
    }

    StrafeToStone
        Entry{
         }
    {
        evDriveComplete DriveForwardToStone {}
        evDriveTimeout DriveForwardToStone {}
    }

    DriveForwardToStone
        Entry{
            linearDriveSlow(8d);
        }
    {
        evDriveComplete GrabStone {}
        // Give it a try anyway
        evDriveTimeout GrabStone {}
    }
    /*
    * Stop after drive forward and check to see if we are at foundation.
    */
    GrabStone
        Entry{
            // close the hook and wait for it to stop so that we grab the block
            closeHand();
            startTimer(1000);
         }
    {
        evTimeout BackupToBeginDrag { }
    }
    /*
    * Backup to begin the drag
    */
    BackupToBeginDrag
        Entry{
            linearDriveSlow(-12d);
         }
    {
        evDriveComplete [ctxt.isBlueAlliance() == true] RotateTowardBridge {
            // Rotate CCW toward the bridge
            rotate(+90);
        }
        evDriveComplete [ctxt.isBlueAlliance() == false] RotateTowardBridge {
            // Rotate CW toward the bridege
            rotate(-90);
        }
        // Try it anyway
        evDriveTimeout [ctxt.isBlueAlliance() == true] RotateTowardBridge {
            // Rotate CCW toward the bridge
            rotate(+90);
        }
        // Try it anyway
        evDriveTimeout [ctxt.isBlueAlliance() == false] RotateTowardBridge {
            // Rotate CW toward the bridege
            rotate(-90);
        }
    }

    /*
    * Rotates toward the bridge and then starts the linear drive to the bridge
    */
    RotateTowardBridge
    {
        evRotationComplete nil  { linearDriveBugUnblocker(); }
        // Try it anyway even if rotation is off.
        evRotationTimeout nil  { linearDriveBugUnblocker(); }
        evDriveComplete DragStone { }
        evDriveTimeout DragStone { }
    }
    /*
    * Drags the stone back under the bridge
    */
    DragStone
        Entry {
            linearDriveSlow(68d);
        }
    {
        evDriveComplete ReleaseStone {}
        evDriveTimeout ReleaseStone {}
    }
    ReleaseStone
        Entry {
            openHand();
            linearDriveSlow(-6d);
        }
    {
        evDriveComplete BackupToBridgeLine {  }
        evDriveTimeout BackupToBridgeLine { }
    }

    /*
    *
    */
    BackupToBridgeLine
        Entry {
            //  backup to the line
            closeHand();
            linearDriveSlow(-10d);
        }
    {
       evDriveComplete Complete {  }
        evDriveTimeout Complete { }
    }
    /*
    * Final state
    */
    Complete
        Entry{
            closeHand();
            stop();
        }
    {

    }
%%
// StateMachine for DragFoundation sequence.  Bot must be center on the 21"  line off of the
// back wall.
%map DragFoundation
%%
    /*
    * drive forward 26 inches.  This should push the foundation by 2 inches
    */
    Start
        Entry {
            openHook();
            closeHand();
            // Raise crane by 4 inches to get clearance for dragging
            moveCrane(6d);
            startTimer(1000);
        }
    {
        evTimeout DriveToFoundation { }
    }

    DriveToFoundation
        Entry{
            // start drive forward
            linearDriveSlow(35d);
    }
    {
       evDriveComplete GrabFoundation {  }
        // Give it a college try on timeout, but we may not have hooked it
        evDriveTimeout GrabFoundation { }
    }

    GrabFoundation
        Entry {
            closeHook();
            startTimer(2000);
        }
    {
        evTimeout DragFoundation {  }
    }

    DragFoundation
        Entry {
            linearDrive(-50d);
        }
    {
        evDriveComplete ReleaseFoundation {        }
        evDriveTimeout ReleaseFoundation {        }
    }

    ReleaseFoundation
        Entry {
            openHook();
            startTimer(1500);
        }
    {
        evTimeout [ctxt.isBlueAlliance() == true] nil {
            // Rotate to the right
            rotate(-90);
        }
        evTimeout [ctxt.isBlueAlliance() == false] nil {
            // rotate to the left
            rotate(+90);
        }
        evRotationComplete LowerCrane { }
        evRotationTimeout LowerCrane { }
    }


    LowerCrane
        Entry{
            // Lower the crane to clear the bridge
            moveCrane(-6d);
            startTimer(3000);
        }
    {
        evTimeout nil {
            linearDriveSlow(56d);
        }
        evDriveComplete Complete {}
        evDriveTimeout Complete {}
     }


    Complete
    Entry {
        stop();
    }
    {

    }
%%

/*
* Does a basic park from the bridge from teh quarry side for
* collaboration with Technologics
* Assume the robot is starting with the side of the robot at
* the edge of the depot color
*/
%map TechnoLogicsBridgePark
%%
    Start
        Entry {
            linearDrive(+24d);
        }
    {
        evDriveComplete [ctxt.isBlueAlliance() == true] RotateToBridge {
            // Rotate CCW toward the bridge
            rotate(+90);
        }
        evDriveComplete [ctxt.isBlueAlliance() == false] RotateToBridge {
            // Rotate CW toward the bridge/
            rotate(-90);
        }
        evDriveTimeout [ctxt.isBlueAlliance() == true] RotateToBridge {
            // Rotate CCW toward the bridge
            rotate(+90);
        }
        evDriveTimeout [ctxt.isBlueAlliance() == false] RotateToBridge {
          // Rotate CW toward the bridge
            rotate(-90);
       }

   }
    RotateToBridge
    {
        evRotationComplete nil { linearDriveBugUnblocker(); }
        // May not have completed but give it a try anyway
        evRotationTimeout nil {  linearDriveBugUnblocker(); }
        evDriveComplete DriveToBridge { linearDriveSlow(44d); }
        evDriveTimeout DriveToBridge { linearDriveSlow(44d); }
    }
    DriveToBridge
    {
        evDriveComplete Complete { }
        evDriveTimeout Complete { }
    }

    Complete
        Entry {
            stop();
        }
    {
    }

%%


/*
* Delays and then moves rearward this is for the NerdBot colllaboration
*/
%map NerdBotsBridgePark
%%
    Start
        Entry {
            startTimer(10000);
        }
    {
        evTimeout CloseHand { }
    }
    CloseHand
        Entry {
            closeHand();
            startTimer(10000);
        }
    {
        evTimeout Drive { }
    }
/*
    * drive backward 10 inches
    */
    Drive
        Entry {
        linearDrive(-10d);
    }
    {

        evDriveComplete Complete { }
        evDriveTimeout Complete { }
    }

    Complete
        Entry {
            stop();
        }
    {
    }

%%