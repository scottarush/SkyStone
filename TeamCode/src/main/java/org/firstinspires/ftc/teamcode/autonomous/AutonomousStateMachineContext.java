/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : AutonomousStateMachine.sm
 */

package org.firstinspires.ftc.teamcode.autonomous;


public class AutonomousStateMachineContext
    extends statemap.FSMContext
{
//---------------------------------------------------------------
// Member methods.
//

    public AutonomousStateMachineContext(AutonomousController owner)
    {
        this (owner, AutonomousStateMachine.Idle);
    }

    public AutonomousStateMachineContext(AutonomousController owner, AutonomousControllerState initState)
    {
        super (initState);

        _owner = owner;
    }

    @Override
    public void enterStartState()
    {
        getState().entry(this);
        return;
    }

    public void evArmRetracted()
    {
        _transition = "evArmRetracted";
        getState().evArmRetracted(this);
        _transition = "";
        return;
    }

    public void evDriveComplete()
    {
        _transition = "evDriveComplete";
        getState().evDriveComplete(this);
        _transition = "";
        return;
    }

    public void evDriveFail()
    {
        _transition = "evDriveFail";
        getState().evDriveFail(this);
        _transition = "";
        return;
    }

    public void evHookTimeout()
    {
        _transition = "evHookTimeout";
        getState().evHookTimeout(this);
        _transition = "";
        return;
    }

    public void evRotationComplete()
    {
        _transition = "evRotationComplete";
        getState().evRotationComplete(this);
        _transition = "";
        return;
    }

    public void evStart()
    {
        _transition = "evStart";
        getState().evStart(this);
        _transition = "";
        return;
    }

    public AutonomousControllerState getState()
        throws statemap.StateUndefinedException
    {
        if (_state == null)
        {
            throw(
                new statemap.StateUndefinedException());
        }

        return ((AutonomousControllerState) _state);
    }

    protected AutonomousController getOwner()
    {
        return (_owner);
    }

    public void setOwner(AutonomousController owner)
    {
        if (owner == null)
        {
            throw (
                new NullPointerException(
                    "null owner"));
        }
        else
        {
            _owner = owner;
        }

        return;
    }

//---------------------------------------------------------------
// Member data.
//

    transient private AutonomousController _owner;

    //-----------------------------------------------------------
    // Constants.
    //

    private static final long serialVersionUID = 1L;

//---------------------------------------------------------------
// Inner classes.
//

    public static abstract class AutonomousControllerState
        extends statemap.State
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected AutonomousControllerState(String name, int id)
        {
            super (name, id);
        }

        protected void entry(AutonomousStateMachineContext context) {}
        protected void exit(AutonomousStateMachineContext context) {}

        protected void evArmRetracted(AutonomousStateMachineContext context)
        {
            Default(context);
        }

        protected void evDriveComplete(AutonomousStateMachineContext context)
        {
            Default(context);
        }

        protected void evDriveFail(AutonomousStateMachineContext context)
        {
            Default(context);
        }

        protected void evHookTimeout(AutonomousStateMachineContext context)
        {
            Default(context);
        }

        protected void evRotationComplete(AutonomousStateMachineContext context)
        {
            Default(context);
        }

        protected void evStart(AutonomousStateMachineContext context)
        {
            Default(context);
        }

        protected void Default(AutonomousStateMachineContext context)
        {
            throw (
                new statemap.TransitionUndefinedException(
                    "State: " +
                    context.getState().getName() +
                    ", Transition: " +
                    context.getTransition()));
        }

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
    // Constants.
    //

        private static final long serialVersionUID = 1L;
    }

    /* package */ static abstract class AutonomousStateMachine
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //

        public static final AutonomousStateMachine_Idle Idle =
            new AutonomousStateMachine_Idle("AutonomousStateMachine.Idle", 0);
        public static final AutonomousStateMachine_DriveForward DriveForward =
            new AutonomousStateMachine_DriveForward("AutonomousStateMachine.DriveForward", 1);
        public static final AutonomousStateMachine_DriveForwardSuccess DriveForwardSuccess =
            new AutonomousStateMachine_DriveForwardSuccess("AutonomousStateMachine.DriveForwardSuccess", 2);
        public static final AutonomousStateMachine_DriveForwardFail DriveForwardFail =
            new AutonomousStateMachine_DriveForwardFail("AutonomousStateMachine.DriveForwardFail", 3);
        public static final AutonomousStateMachine_DragFoundation DragFoundation =
            new AutonomousStateMachine_DragFoundation("AutonomousStateMachine.DragFoundation", 4);
        public static final AutonomousStateMachine_RotateToQuarry RotateToQuarry =
            new AutonomousStateMachine_RotateToQuarry("AutonomousStateMachine.RotateToQuarry", 5);
        public static final AutonomousStateMachine_PrepareDriveToQuarry PrepareDriveToQuarry =
            new AutonomousStateMachine_PrepareDriveToQuarry("AutonomousStateMachine.PrepareDriveToQuarry", 6);
        public static final AutonomousStateMachine_DriveToQuarry DriveToQuarry =
            new AutonomousStateMachine_DriveToQuarry("AutonomousStateMachine.DriveToQuarry", 7);
        public static final AutonomousStateMachine_RotateToBlock RotateToBlock =
            new AutonomousStateMachine_RotateToBlock("AutonomousStateMachine.RotateToBlock", 8);
        public static final AutonomousStateMachine_Success Success =
            new AutonomousStateMachine_Success("AutonomousStateMachine.Success", 9);
    }

    protected static class AutonomousStateMachine_Default
        extends AutonomousControllerState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected AutonomousStateMachine_Default(String name, int id)
        {
            super (name, id);
        }

    //-----------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class AutonomousStateMachine_Idle
        extends AutonomousStateMachine_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private AutonomousStateMachine_Idle(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void evStart(AutonomousStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(AutonomousStateMachine.DriveForward);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class AutonomousStateMachine_DriveForward
        extends AutonomousStateMachine_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private AutonomousStateMachine_DriveForward(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(AutonomousStateMachineContext context)
            {
                AutonomousController ctxt = context.getOwner();

            ctxt.setLogMessage("DriveForward");
            ctxt.openHook();
            ctxt.driveToFoundation();
            return;
        }

        @Override
        protected void evDriveComplete(AutonomousStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(AutonomousStateMachine.DriveForwardSuccess);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void evDriveFail(AutonomousStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(AutonomousStateMachine.DriveForwardFail);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class AutonomousStateMachine_DriveForwardSuccess
        extends AutonomousStateMachine_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private AutonomousStateMachine_DriveForwardSuccess(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(AutonomousStateMachineContext context)
            {
                AutonomousController ctxt = context.getOwner();

            ctxt.setLogMessage("DriveForwardSuccess");
            ctxt.closeHook();
            ctxt.startHookTimer();
            return;
        }

        @Override
        protected void evHookTimeout(AutonomousStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(AutonomousStateMachine.DragFoundation);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class AutonomousStateMachine_DriveForwardFail
        extends AutonomousStateMachine_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private AutonomousStateMachine_DriveForwardFail(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(AutonomousStateMachineContext context)
            {
                AutonomousController ctxt = context.getOwner();

            ctxt.setLogMessage("DriveForwardFail");
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class AutonomousStateMachine_DragFoundation
        extends AutonomousStateMachine_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private AutonomousStateMachine_DragFoundation(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(AutonomousStateMachineContext context)
            {
                AutonomousController ctxt = context.getOwner();

            ctxt.setLogMessage("DragFoundation");
            ctxt.dragFoundation();
            return;
        }

        @Override
        protected void evDriveComplete(AutonomousStateMachineContext context)
        {
            AutonomousController ctxt = context.getOwner();

            AutonomousControllerState endState = context.getState();
            context.clearState();
            try
            {
                ctxt.openHook();
                ctxt.startHookTimer();
            }
            finally
            {
                context.setState(endState);
            }

            return;
        }

        @Override
        protected void evHookTimeout(AutonomousStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(AutonomousStateMachine.RotateToQuarry);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class AutonomousStateMachine_RotateToQuarry
        extends AutonomousStateMachine_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private AutonomousStateMachine_RotateToQuarry(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(AutonomousStateMachineContext context)
            {
                AutonomousController ctxt = context.getOwner();

            ctxt.setLogMessage("RotateToQuarry");
            ctxt.rotateToQuarry();
            return;
        }

        @Override
        protected void evRotationComplete(AutonomousStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(AutonomousStateMachine.PrepareDriveToQuarry);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class AutonomousStateMachine_PrepareDriveToQuarry
        extends AutonomousStateMachine_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private AutonomousStateMachine_PrepareDriveToQuarry(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(AutonomousStateMachineContext context)
            {
                AutonomousController ctxt = context.getOwner();

            ctxt.setLogMessage("PrepareDriveToQuarry");
            ctxt.retractArm();
            return;
        }

        @Override
        protected void evArmRetracted(AutonomousStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(AutonomousStateMachine.DriveToQuarry);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class AutonomousStateMachine_DriveToQuarry
        extends AutonomousStateMachine_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private AutonomousStateMachine_DriveToQuarry(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(AutonomousStateMachineContext context)
            {
                AutonomousController ctxt = context.getOwner();

            ctxt.setLogMessage("DriveToQuarry");
            ctxt.driveToQuarry();
            return;
        }

        @Override
        protected void evDriveComplete(AutonomousStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(AutonomousStateMachine.Success);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class AutonomousStateMachine_RotateToBlock
        extends AutonomousStateMachine_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private AutonomousStateMachine_RotateToBlock(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(AutonomousStateMachineContext context)
            {
                AutonomousController ctxt = context.getOwner();

            ctxt.setLogMessage("RotateToBlock");
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class AutonomousStateMachine_Success
        extends AutonomousStateMachine_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private AutonomousStateMachine_Success(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(AutonomousStateMachineContext context)
            {
                AutonomousController ctxt = context.getOwner();

            ctxt.setLogMessage("Success");
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
