/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : SpeedBotAutoStateMachine.sm
 */

package org.firstinspires.ftc.teamcode.autonomous;


public class SpeedBotAutoStateMachineContext
    extends statemap.FSMContext
{
//---------------------------------------------------------------
// Member methods.
//

    public SpeedBotAutoStateMachineContext(AutonomousController owner)
    {
        this (owner, SpeedBotAutoStateMachine.Idle);
    }

    public SpeedBotAutoStateMachineContext(AutonomousController owner, AutonomousControllerState initState)
    {
        super (initState);

        _owner = owner;
    }

    @Override
    public void enterStartState()
    {
        getState().entry(this);
        return;
    }

    public void evDriveComplete()
    {
        _transition = "evDriveComplete";
        getState().evDriveComplete(this);
        _transition = "";
        return;
    }

    public void evDriveTimeout()
    {
        _transition = "evDriveTimeout";
        getState().evDriveTimeout(this);
        _transition = "";
        return;
    }

    public void evNoStoneFound()
    {
        _transition = "evNoStoneFound";
        getState().evNoStoneFound(this);
        _transition = "";
        return;
    }

    public void evRotationComplete()
    {
        _transition = "evRotationComplete";
        getState().evRotationComplete(this);
        _transition = "";
        return;
    }

    public void evRotationTimeout()
    {
        _transition = "evRotationTimeout";
        getState().evRotationTimeout(this);
        _transition = "";
        return;
    }

    public void evSkystoneFound()
    {
        _transition = "evSkystoneFound";
        getState().evSkystoneFound(this);
        _transition = "";
        return;
    }

    public void evStartDragFoundation()
    {
        _transition = "evStartDragFoundation";
        getState().evStartDragFoundation(this);
        _transition = "";
        return;
    }

    public void evStartDriveToStones()
    {
        _transition = "evStartDriveToStones";
        getState().evStartDriveToStones(this);
        _transition = "";
        return;
    }

    public void evStartNerdBotsBridgePark()
    {
        _transition = "evStartNerdBotsBridgePark";
        getState().evStartNerdBotsBridgePark(this);
        _transition = "";
        return;
    }

    public void evStartTechnoLogicsBridgePark()
    {
        _transition = "evStartTechnoLogicsBridgePark";
        getState().evStartTechnoLogicsBridgePark(this);
        _transition = "";
        return;
    }

    public void evStoneFound()
    {
        _transition = "evStoneFound";
        getState().evStoneFound(this);
        _transition = "";
        return;
    }

    public void evTimeout()
    {
        _transition = "evTimeout";
        getState().evTimeout(this);
        _transition = "";
        return;
    }

    public AutonomousControllerState getState()
        throws statemap.StateUndefinedException
    {
        if (_state == null)
        {
            throw(
                new statemap.StateUndefinedException());
        }

        return ((AutonomousControllerState) _state);
    }

    protected AutonomousController getOwner()
    {
        return (_owner);
    }

    public void setOwner(AutonomousController owner)
    {
        if (owner == null)
        {
            throw (
                new NullPointerException(
                    "null owner"));
        }
        else
        {
            _owner = owner;
        }

        return;
    }

//---------------------------------------------------------------
// Member data.
//

    transient private AutonomousController _owner;

    //-----------------------------------------------------------
    // Constants.
    //

    private static final long serialVersionUID = 1L;

//---------------------------------------------------------------
// Inner classes.
//

    public static abstract class AutonomousControllerState
        extends statemap.State
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected AutonomousControllerState(String name, int id)
        {
            super (name, id);
        }

        protected void entry(SpeedBotAutoStateMachineContext context) {}
        protected void exit(SpeedBotAutoStateMachineContext context) {}

        protected void evDriveComplete(SpeedBotAutoStateMachineContext context)
        {
            Default(context);
        }

        protected void evDriveTimeout(SpeedBotAutoStateMachineContext context)
        {
            Default(context);
        }

        protected void evNoStoneFound(SpeedBotAutoStateMachineContext context)
        {
            Default(context);
        }

        protected void evRotationComplete(SpeedBotAutoStateMachineContext context)
        {
            Default(context);
        }

        protected void evRotationTimeout(SpeedBotAutoStateMachineContext context)
        {
            Default(context);
        }

        protected void evSkystoneFound(SpeedBotAutoStateMachineContext context)
        {
            Default(context);
        }

        protected void evStartDragFoundation(SpeedBotAutoStateMachineContext context)
        {
            Default(context);
        }

        protected void evStartDriveToStones(SpeedBotAutoStateMachineContext context)
        {
            Default(context);
        }

        protected void evStartNerdBotsBridgePark(SpeedBotAutoStateMachineContext context)
        {
            Default(context);
        }

        protected void evStartTechnoLogicsBridgePark(SpeedBotAutoStateMachineContext context)
        {
            Default(context);
        }

        protected void evStoneFound(SpeedBotAutoStateMachineContext context)
        {
            Default(context);
        }

        protected void evTimeout(SpeedBotAutoStateMachineContext context)
        {
            Default(context);
        }

        protected void Default(SpeedBotAutoStateMachineContext context)
        {
            throw (
                new statemap.TransitionUndefinedException(
                    "State: " +
                    context.getState().getName() +
                    ", Transition: " +
                    context.getTransition()));
        }

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
    // Constants.
    //

        private static final long serialVersionUID = 1L;
    }

    /* package */ static abstract class SpeedBotAutoStateMachine
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //

        public static final SpeedBotAutoStateMachine_Idle Idle =
            new SpeedBotAutoStateMachine_Idle("SpeedBotAutoStateMachine.Idle", 0);
    }

    protected static class SpeedBotAutoStateMachine_Default
        extends AutonomousControllerState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected SpeedBotAutoStateMachine_Default(String name, int id)
        {
            super (name, id);
        }

    //-----------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class SpeedBotAutoStateMachine_Idle
        extends SpeedBotAutoStateMachine_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private SpeedBotAutoStateMachine_Idle(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void evStartDragFoundation(SpeedBotAutoStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(DragFoundation.Start);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void evStartDriveToStones(SpeedBotAutoStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(GetStones.Start);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void evStartNerdBotsBridgePark(SpeedBotAutoStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(NerdBotsBridgePark.Start);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void evStartTechnoLogicsBridgePark(SpeedBotAutoStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(TechnoLogicsBridgePark.Start);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    /* package */ static abstract class GetStones
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //

        public static final GetStones_Start Start =
            new GetStones_Start("GetStones.Start", 1);
        public static final GetStones_StrafeToStone StrafeToStone =
            new GetStones_StrafeToStone("GetStones.StrafeToStone", 2);
        public static final GetStones_DriveForwardToStone DriveForwardToStone =
            new GetStones_DriveForwardToStone("GetStones.DriveForwardToStone", 3);
        public static final GetStones_GrabStone GrabStone =
            new GetStones_GrabStone("GetStones.GrabStone", 4);
        public static final GetStones_BackupToBeginDrag BackupToBeginDrag =
            new GetStones_BackupToBeginDrag("GetStones.BackupToBeginDrag", 5);
        public static final GetStones_RotateTowardBridge RotateTowardBridge =
            new GetStones_RotateTowardBridge("GetStones.RotateTowardBridge", 6);
        public static final GetStones_DragStone DragStone =
            new GetStones_DragStone("GetStones.DragStone", 7);
        public static final GetStones_ReleaseStone ReleaseStone =
            new GetStones_ReleaseStone("GetStones.ReleaseStone", 8);
        public static final GetStones_BackupToBridgeLine BackupToBridgeLine =
            new GetStones_BackupToBridgeLine("GetStones.BackupToBridgeLine", 9);
        public static final GetStones_Complete Complete =
            new GetStones_Complete("GetStones.Complete", 10);
    }

    protected static class GetStones_Default
        extends AutonomousControllerState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected GetStones_Default(String name, int id)
        {
            super (name, id);
        }

    //-----------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class GetStones_Start
        extends GetStones_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private GetStones_Start(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(SpeedBotAutoStateMachineContext context)
            {
                AutonomousController ctxt = context.getOwner();

            ctxt.openHand();
            ctxt.linearDriveSlow(28d);
            return;
        }

        @Override
        protected void evDriveComplete(SpeedBotAutoStateMachineContext context)
        {
            AutonomousController ctxt = context.getOwner();

            AutonomousControllerState endState = context.getState();
            context.clearState();
            try
            {
                ctxt.checkStoneRecognition();
            }
            finally
            {
                context.setState(endState);
            }

            return;
        }

        @Override
        protected void evDriveTimeout(SpeedBotAutoStateMachineContext context)
        {
            AutonomousController ctxt = context.getOwner();

            AutonomousControllerState endState = context.getState();
            context.clearState();
            try
            {
                ctxt.checkStoneRecognition();
            }
            finally
            {
                context.setState(endState);
            }

            return;
        }

        @Override
        protected void evNoStoneFound(SpeedBotAutoStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(GetStones.DriveForwardToStone);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void evSkystoneFound(SpeedBotAutoStateMachineContext context)
        {
            AutonomousController ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.strafeToSkystone(10d, 2000);
            }
            finally
            {
                context.setState(GetStones.StrafeToStone);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void evStoneFound(SpeedBotAutoStateMachineContext context)
        {
            AutonomousController ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.strafeToStone(10d, 2000);
            }
            finally
            {
                context.setState(GetStones.StrafeToStone);
                (context.getState()).entry(context);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class GetStones_StrafeToStone
        extends GetStones_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private GetStones_StrafeToStone(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void evDriveComplete(SpeedBotAutoStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(GetStones.DriveForwardToStone);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void evDriveTimeout(SpeedBotAutoStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(GetStones.DriveForwardToStone);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class GetStones_DriveForwardToStone
        extends GetStones_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private GetStones_DriveForwardToStone(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(SpeedBotAutoStateMachineContext context)
            {
                AutonomousController ctxt = context.getOwner();

            ctxt.linearDriveSlow(8d);
            return;
        }

        @Override
        protected void evDriveComplete(SpeedBotAutoStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(GetStones.GrabStone);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void evDriveTimeout(SpeedBotAutoStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(GetStones.GrabStone);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class GetStones_GrabStone
        extends GetStones_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private GetStones_GrabStone(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(SpeedBotAutoStateMachineContext context)
            {
                AutonomousController ctxt = context.getOwner();

            ctxt.closeHand();
            ctxt.startTimer(1000);
            return;
        }

        @Override
        protected void evTimeout(SpeedBotAutoStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(GetStones.BackupToBeginDrag);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class GetStones_BackupToBeginDrag
        extends GetStones_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private GetStones_BackupToBeginDrag(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(SpeedBotAutoStateMachineContext context)
            {
                AutonomousController ctxt = context.getOwner();

            ctxt.linearDriveSlow(-12d);
            return;
        }

        @Override
        protected void evDriveComplete(SpeedBotAutoStateMachineContext context)
        {
            AutonomousController ctxt = context.getOwner();

            if (ctxt.isBlueAlliance() == true)
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.rotate(+90);
                }
                finally
                {
                    context.setState(GetStones.RotateTowardBridge);
                    (context.getState()).entry(context);
                }

            }
            else if (ctxt.isBlueAlliance() == false)
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.rotate(-90);
                }
                finally
                {
                    context.setState(GetStones.RotateTowardBridge);
                    (context.getState()).entry(context);
                }

            }            else
            {
                super.evDriveComplete(context);
            }

            return;
        }

        @Override
        protected void evDriveTimeout(SpeedBotAutoStateMachineContext context)
        {
            AutonomousController ctxt = context.getOwner();

            if (ctxt.isBlueAlliance() == true)
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.rotate(+90);
                }
                finally
                {
                    context.setState(GetStones.RotateTowardBridge);
                    (context.getState()).entry(context);
                }

            }
            else if (ctxt.isBlueAlliance() == false)
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.rotate(-90);
                }
                finally
                {
                    context.setState(GetStones.RotateTowardBridge);
                    (context.getState()).entry(context);
                }

            }            else
            {
                super.evDriveTimeout(context);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class GetStones_RotateTowardBridge
        extends GetStones_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private GetStones_RotateTowardBridge(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void evDriveComplete(SpeedBotAutoStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(GetStones.DragStone);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void evDriveTimeout(SpeedBotAutoStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(GetStones.DragStone);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void evRotationComplete(SpeedBotAutoStateMachineContext context)
        {
            AutonomousController ctxt = context.getOwner();

            AutonomousControllerState endState = context.getState();
            context.clearState();
            try
            {
                ctxt.linearDriveBugUnblocker();
            }
            finally
            {
                context.setState(endState);
            }

            return;
        }

        @Override
        protected void evRotationTimeout(SpeedBotAutoStateMachineContext context)
        {
            AutonomousController ctxt = context.getOwner();

            AutonomousControllerState endState = context.getState();
            context.clearState();
            try
            {
                ctxt.linearDriveBugUnblocker();
            }
            finally
            {
                context.setState(endState);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class GetStones_DragStone
        extends GetStones_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private GetStones_DragStone(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(SpeedBotAutoStateMachineContext context)
            {
                AutonomousController ctxt = context.getOwner();

            ctxt.linearDriveSlow(68d);
            return;
        }

        @Override
        protected void evDriveComplete(SpeedBotAutoStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(GetStones.ReleaseStone);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void evDriveTimeout(SpeedBotAutoStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(GetStones.ReleaseStone);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class GetStones_ReleaseStone
        extends GetStones_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private GetStones_ReleaseStone(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(SpeedBotAutoStateMachineContext context)
            {
                AutonomousController ctxt = context.getOwner();

            ctxt.openHand();
            ctxt.linearDriveSlow(-6d);
            return;
        }

        @Override
        protected void evDriveComplete(SpeedBotAutoStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(GetStones.BackupToBridgeLine);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void evDriveTimeout(SpeedBotAutoStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(GetStones.BackupToBridgeLine);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class GetStones_BackupToBridgeLine
        extends GetStones_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private GetStones_BackupToBridgeLine(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(SpeedBotAutoStateMachineContext context)
            {
                AutonomousController ctxt = context.getOwner();

            ctxt.closeHand();
            ctxt.linearDriveSlow(-10d);
            return;
        }

        @Override
        protected void evDriveComplete(SpeedBotAutoStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(GetStones.Complete);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void evDriveTimeout(SpeedBotAutoStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(GetStones.Complete);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class GetStones_Complete
        extends GetStones_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private GetStones_Complete(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(SpeedBotAutoStateMachineContext context)
            {
                AutonomousController ctxt = context.getOwner();

            ctxt.closeHand();
            ctxt.stop();
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    /* package */ static abstract class DragFoundation
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //

        public static final DragFoundation_Start Start =
            new DragFoundation_Start("DragFoundation.Start", 11);
        public static final DragFoundation_DriveToFoundation DriveToFoundation =
            new DragFoundation_DriveToFoundation("DragFoundation.DriveToFoundation", 12);
        public static final DragFoundation_GrabFoundation GrabFoundation =
            new DragFoundation_GrabFoundation("DragFoundation.GrabFoundation", 13);
        public static final DragFoundation_DragFoundation DragFoundation =
            new DragFoundation_DragFoundation("DragFoundation.DragFoundation", 14);
        public static final DragFoundation_ReleaseFoundation ReleaseFoundation =
            new DragFoundation_ReleaseFoundation("DragFoundation.ReleaseFoundation", 15);
        public static final DragFoundation_LowerCrane LowerCrane =
            new DragFoundation_LowerCrane("DragFoundation.LowerCrane", 16);
        public static final DragFoundation_Complete Complete =
            new DragFoundation_Complete("DragFoundation.Complete", 17);
    }

    protected static class DragFoundation_Default
        extends AutonomousControllerState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected DragFoundation_Default(String name, int id)
        {
            super (name, id);
        }

    //-----------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class DragFoundation_Start
        extends DragFoundation_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private DragFoundation_Start(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(SpeedBotAutoStateMachineContext context)
            {
                AutonomousController ctxt = context.getOwner();

            ctxt.openHook();
            ctxt.closeHand();
            ctxt.moveCrane(6d);
            ctxt.startTimer(1000);
            return;
        }

        @Override
        protected void evTimeout(SpeedBotAutoStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(DragFoundation.DriveToFoundation);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class DragFoundation_DriveToFoundation
        extends DragFoundation_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private DragFoundation_DriveToFoundation(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(SpeedBotAutoStateMachineContext context)
            {
                AutonomousController ctxt = context.getOwner();

            ctxt.linearDriveSlow(35d);
            return;
        }

        @Override
        protected void evDriveComplete(SpeedBotAutoStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(DragFoundation.GrabFoundation);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void evDriveTimeout(SpeedBotAutoStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(DragFoundation.GrabFoundation);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class DragFoundation_GrabFoundation
        extends DragFoundation_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private DragFoundation_GrabFoundation(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(SpeedBotAutoStateMachineContext context)
            {
                AutonomousController ctxt = context.getOwner();

            ctxt.closeHook();
            ctxt.startTimer(2000);
            return;
        }

        @Override
        protected void evTimeout(SpeedBotAutoStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(DragFoundation.DragFoundation);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class DragFoundation_DragFoundation
        extends DragFoundation_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private DragFoundation_DragFoundation(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(SpeedBotAutoStateMachineContext context)
            {
                AutonomousController ctxt = context.getOwner();

            ctxt.linearDrive(-50d);
            return;
        }

        @Override
        protected void evDriveComplete(SpeedBotAutoStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(DragFoundation.ReleaseFoundation);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void evDriveTimeout(SpeedBotAutoStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(DragFoundation.ReleaseFoundation);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class DragFoundation_ReleaseFoundation
        extends DragFoundation_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private DragFoundation_ReleaseFoundation(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(SpeedBotAutoStateMachineContext context)
            {
                AutonomousController ctxt = context.getOwner();

            ctxt.openHook();
            ctxt.startTimer(1500);
            return;
        }

        @Override
        protected void evRotationComplete(SpeedBotAutoStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(DragFoundation.LowerCrane);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void evRotationTimeout(SpeedBotAutoStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(DragFoundation.LowerCrane);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void evTimeout(SpeedBotAutoStateMachineContext context)
        {
            AutonomousController ctxt = context.getOwner();

            if (ctxt.isBlueAlliance() == true)
            {
                AutonomousControllerState endState = context.getState();
                context.clearState();
                try
                {
                    ctxt.rotate(-90);
                }
                finally
                {
                    context.setState(endState);
                }

            }
            else if (ctxt.isBlueAlliance() == false)
            {
                AutonomousControllerState endState = context.getState();
                context.clearState();
                try
                {
                    ctxt.rotate(+90);
                }
                finally
                {
                    context.setState(endState);
                }

            }            else
            {
                super.evTimeout(context);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class DragFoundation_LowerCrane
        extends DragFoundation_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private DragFoundation_LowerCrane(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(SpeedBotAutoStateMachineContext context)
            {
                AutonomousController ctxt = context.getOwner();

            ctxt.moveCrane(-6d);
            ctxt.startTimer(3000);
            return;
        }

        @Override
        protected void evDriveComplete(SpeedBotAutoStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(DragFoundation.Complete);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void evDriveTimeout(SpeedBotAutoStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(DragFoundation.Complete);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void evTimeout(SpeedBotAutoStateMachineContext context)
        {
            AutonomousController ctxt = context.getOwner();

            AutonomousControllerState endState = context.getState();
            context.clearState();
            try
            {
                ctxt.linearDriveSlow(56d);
            }
            finally
            {
                context.setState(endState);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class DragFoundation_Complete
        extends DragFoundation_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private DragFoundation_Complete(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(SpeedBotAutoStateMachineContext context)
            {
                AutonomousController ctxt = context.getOwner();

            ctxt.stop();
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    /* package */ static abstract class TechnoLogicsBridgePark
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //

        public static final TechnoLogicsBridgePark_Start Start =
            new TechnoLogicsBridgePark_Start("TechnoLogicsBridgePark.Start", 18);
        public static final TechnoLogicsBridgePark_RotateToBridge RotateToBridge =
            new TechnoLogicsBridgePark_RotateToBridge("TechnoLogicsBridgePark.RotateToBridge", 19);
        public static final TechnoLogicsBridgePark_DriveToBridge DriveToBridge =
            new TechnoLogicsBridgePark_DriveToBridge("TechnoLogicsBridgePark.DriveToBridge", 20);
        public static final TechnoLogicsBridgePark_Complete Complete =
            new TechnoLogicsBridgePark_Complete("TechnoLogicsBridgePark.Complete", 21);
    }

    protected static class TechnoLogicsBridgePark_Default
        extends AutonomousControllerState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected TechnoLogicsBridgePark_Default(String name, int id)
        {
            super (name, id);
        }

    //-----------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class TechnoLogicsBridgePark_Start
        extends TechnoLogicsBridgePark_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private TechnoLogicsBridgePark_Start(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(SpeedBotAutoStateMachineContext context)
            {
                AutonomousController ctxt = context.getOwner();

            ctxt.linearDrive(+24d);
            return;
        }

        @Override
        protected void evDriveComplete(SpeedBotAutoStateMachineContext context)
        {
            AutonomousController ctxt = context.getOwner();

            if (ctxt.isBlueAlliance() == true)
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.rotate(+90);
                }
                finally
                {
                    context.setState(TechnoLogicsBridgePark.RotateToBridge);
                    (context.getState()).entry(context);
                }

            }
            else if (ctxt.isBlueAlliance() == false)
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.rotate(-90);
                }
                finally
                {
                    context.setState(TechnoLogicsBridgePark.RotateToBridge);
                    (context.getState()).entry(context);
                }

            }            else
            {
                super.evDriveComplete(context);
            }

            return;
        }

        @Override
        protected void evDriveTimeout(SpeedBotAutoStateMachineContext context)
        {
            AutonomousController ctxt = context.getOwner();

            if (ctxt.isBlueAlliance() == true)
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.rotate(+90);
                }
                finally
                {
                    context.setState(TechnoLogicsBridgePark.RotateToBridge);
                    (context.getState()).entry(context);
                }

            }
            else if (ctxt.isBlueAlliance() == false)
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.rotate(-90);
                }
                finally
                {
                    context.setState(TechnoLogicsBridgePark.RotateToBridge);
                    (context.getState()).entry(context);
                }

            }            else
            {
                super.evDriveTimeout(context);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class TechnoLogicsBridgePark_RotateToBridge
        extends TechnoLogicsBridgePark_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private TechnoLogicsBridgePark_RotateToBridge(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void evDriveComplete(SpeedBotAutoStateMachineContext context)
        {
            AutonomousController ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.linearDriveSlow(44d);
            }
            finally
            {
                context.setState(TechnoLogicsBridgePark.DriveToBridge);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void evDriveTimeout(SpeedBotAutoStateMachineContext context)
        {
            AutonomousController ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.linearDriveSlow(44d);
            }
            finally
            {
                context.setState(TechnoLogicsBridgePark.DriveToBridge);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void evRotationComplete(SpeedBotAutoStateMachineContext context)
        {
            AutonomousController ctxt = context.getOwner();

            AutonomousControllerState endState = context.getState();
            context.clearState();
            try
            {
                ctxt.linearDriveBugUnblocker();
            }
            finally
            {
                context.setState(endState);
            }

            return;
        }

        @Override
        protected void evRotationTimeout(SpeedBotAutoStateMachineContext context)
        {
            AutonomousController ctxt = context.getOwner();

            AutonomousControllerState endState = context.getState();
            context.clearState();
            try
            {
                ctxt.linearDriveBugUnblocker();
            }
            finally
            {
                context.setState(endState);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class TechnoLogicsBridgePark_DriveToBridge
        extends TechnoLogicsBridgePark_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private TechnoLogicsBridgePark_DriveToBridge(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void evDriveComplete(SpeedBotAutoStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(TechnoLogicsBridgePark.Complete);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void evDriveTimeout(SpeedBotAutoStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(TechnoLogicsBridgePark.Complete);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class TechnoLogicsBridgePark_Complete
        extends TechnoLogicsBridgePark_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private TechnoLogicsBridgePark_Complete(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(SpeedBotAutoStateMachineContext context)
            {
                AutonomousController ctxt = context.getOwner();

            ctxt.stop();
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    /* package */ static abstract class NerdBotsBridgePark
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //

        public static final NerdBotsBridgePark_Start Start =
            new NerdBotsBridgePark_Start("NerdBotsBridgePark.Start", 22);
        public static final NerdBotsBridgePark_CloseHand CloseHand =
            new NerdBotsBridgePark_CloseHand("NerdBotsBridgePark.CloseHand", 23);
        public static final NerdBotsBridgePark_Drive Drive =
            new NerdBotsBridgePark_Drive("NerdBotsBridgePark.Drive", 24);
        public static final NerdBotsBridgePark_Complete Complete =
            new NerdBotsBridgePark_Complete("NerdBotsBridgePark.Complete", 25);
    }

    protected static class NerdBotsBridgePark_Default
        extends AutonomousControllerState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected NerdBotsBridgePark_Default(String name, int id)
        {
            super (name, id);
        }

    //-----------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class NerdBotsBridgePark_Start
        extends NerdBotsBridgePark_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private NerdBotsBridgePark_Start(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(SpeedBotAutoStateMachineContext context)
            {
                AutonomousController ctxt = context.getOwner();

            ctxt.startTimer(10000);
            return;
        }

        @Override
        protected void evTimeout(SpeedBotAutoStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(NerdBotsBridgePark.CloseHand);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class NerdBotsBridgePark_CloseHand
        extends NerdBotsBridgePark_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private NerdBotsBridgePark_CloseHand(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(SpeedBotAutoStateMachineContext context)
            {
                AutonomousController ctxt = context.getOwner();

            ctxt.closeHand();
            ctxt.startTimer(10000);
            return;
        }

        @Override
        protected void evTimeout(SpeedBotAutoStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(NerdBotsBridgePark.Drive);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class NerdBotsBridgePark_Drive
        extends NerdBotsBridgePark_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private NerdBotsBridgePark_Drive(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(SpeedBotAutoStateMachineContext context)
            {
                AutonomousController ctxt = context.getOwner();

            ctxt.linearDrive(-10d);
            return;
        }

        @Override
        protected void evDriveComplete(SpeedBotAutoStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(NerdBotsBridgePark.Complete);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void evDriveTimeout(SpeedBotAutoStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(NerdBotsBridgePark.Complete);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class NerdBotsBridgePark_Complete
        extends NerdBotsBridgePark_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private NerdBotsBridgePark_Complete(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(SpeedBotAutoStateMachineContext context)
            {
                AutonomousController ctxt = context.getOwner();

            ctxt.stop();
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
